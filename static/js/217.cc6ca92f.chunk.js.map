{"version":3,"file":"static/js/217.cc6ca92f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AddForm/AddForm.module.css?c4c6","components/AddForm/AddForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactPage/ContactPage.module.css?b217","pages/ContactPage/ContactPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerInput\":\"AddForm_containerInput__upGJ6\",\"buttonForm\":\"AddForm_buttonForm__5FZ1w\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { nanoid } from 'nanoid';\nimport style from './AddForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(state => state.contacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContacts = {\n      id: nanoid(),\n      name: name,\n      phone: phone,\n    };\n\n    if (\n      contacts?.some(\n        contact =>\n          contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(addContact(newContacts));\n    setName('');\n    setPhone('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={style.containerInput}>\n        <label htmlFor={nameId} className={style.formLabel}>\n          Name\n          <input\n            className={style.formInput}\n            value={name}\n            id={nameId}\n            type=\"text\"\n            onChange={handleChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={numberId} className={style.formLabel}>\n          Number\n          <input\n            className={style.formInput}\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={phone}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <button type=\"submit\" className={style.buttonForm}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"listUses\":\"ContactList_listUses__Aa-vb\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport style from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contactList = useSelector(state => state.contacts.contacts);\n  const contactFilter = useSelector(state => state.filter);\n  const normalizedFilterContacts = contactList?.filter(contact => {\n    return contact.name.toLowerCase().includes(contactFilter);\n  });\n\n  return (\n    <ul className={style.listUsers}>\n      {normalizedFilterContacts?.map(contact => (\n        <li key={contact.id} className={style.itemUser}>\n          <p className={style.itemText}>{contact.name}: </p>\n          <p className={style.itemText}>{contact.phone}</p>\n          <button\n            className={style.buttonDelete}\n            onClick={id => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filter.slice';\nimport { nanoid } from 'nanoid';\nimport style from './Filter.module.css';\n\nexport default function Filter() {\n  const filterQuery = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  return (\n    <label className={style.filterInput} htmlFor={filterId}>\n      Find contacts by name\n      <input\n        name=\"filter\"\n        id={filterId}\n        type=\"text\"\n        value={filterQuery}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      />\n    </label>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactPage_container__p8wM4\",\"titleBook\":\"ContactPage_titleBook__kNRND\",\"titleContacts\":\"ContactPage_titleContacts__Udlnb\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport ContactForm from 'components/AddForm/AddForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport style from './ContactPage.module.css';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n  const addedContacts = useSelector(state => state.contacts.contacts);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div className={style.container}>\n      <h1 className={style.titleBook}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={style.titleContacts}>Contacts</h2>\n      <Filter />\n      {error && <h2>Error...</h2>}\n      {isLoading && <h3>Loading...</h3>}\n      {addedContacts.length > 0 ? (\n        <>\n          <ContactList />\n        </>\n      ) : (\n        <h2>You have not added contacts yet</h2>\n      )}\n    </div>\n  );\n};\n\nexport default ContactPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","phone","setPhone","nameId","nanoid","numberId","dispatch","useDispatch","contacts","useSelector","state","handleChange","event","target","value","onSubmit","preventDefault","newContacts","id","some","contact","toLowerCase","trim","alert","addContact","className","style","htmlFor","type","onChange","pattern","title","required","ContactList","contactList","contactFilter","filter","normalizedFilterContacts","includes","map","onClick","deleteContact","Filter","filterQuery","filterId","e","setFilter","currentTarget","addedContacts","isLoading","error","useEffect","fetchContacts","length","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}