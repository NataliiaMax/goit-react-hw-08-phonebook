{"version":3,"file":"static/js/822.f560c91b.chunk.js","mappings":"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","sources":["components/RegisterForm/fields.js","components/RegisterForm/initialState.js","webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","webpack://react-homework-template/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/shared/components/Button/Button.module.css?4d6c","shared/components/Button/Button.jsx","webpack://react-homework-template/./src/shared/components/TextField/TextField.module.css?2d5d","shared/components/TextField/TextField.jsx","shared/hook/useForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// import { Schema } from 'mongoose';\n// const uniqueValidator = require('mongoose-unique-validator');\n// new Schema({\nconst fields = {\n  name: {\n    // type: String,\n    type:\"string\",\n    name: 'name',\n    required: true,\n    label: 'Name',\n    placeholder: 'User name',\n    // unique: true,\n  },\n  email: {\n    type: 'string',\n    name: 'email',\n    required: true,\n    label: 'Email',\n    placeholder: 'User  email',\n    // unique: true,\n  },\n  password: {\n    type: 'string',\n    name: 'password',\n    required: true,\n    label: 'Password',\n    placeholder: 'User password',\n    // bcrypt: true,\n  },\n};\n\n// fields.plugin(uniqueValidator, {\n//     type: 'mongoose-unique-validator',\n//     message: 'Error, expected {PATH} to be unique.'\n// });\n\nexport default fields;\n","const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\"};","import TextField from 'shared/components/TextField/TextField';\nimport useForm from 'shared/hook/useForm';\nimport fields from './fields';\nimport initialState from './initialState';\nimport Button from 'shared/components/Button/Button';\nimport style from './RegisterForm.module.css';\n// import { useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\n\nconst RegisterForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { name, email, password } = state;\n  return (\n    <form className={style.form} onSubmit={handleSubmit}>\n      <TextField value={name} handleChange={handleChange} {...fields.name} />\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField value={password} handleChange={handleChange} {...fields.password} />\n      <Button>Sign up</Button>\n    </form>\n  );\n};\n\n// // export default RegisterForm;\n\n\n\n// const RegisterForm = ({ onSubmit }) => {\n//   const [state, setState] = useState(initialState);\n//   const { name, email, password } = state;\n\n//   const hanldeChange = event => {\n//     const { name, value } = event.target;\n\n//     setState(prev => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const hanldeSubmit = event => {\n//     event.preventDefault();\n\n//     onSubmit(state);\n\n//     resetForm();\n//   };\n\n//   const resetForm = () => {\n//     setState(initialState);\n//   };\n\n//   return (\n//     <form className={styles.form} onSubmit={hanldeSubmit}>\n//       <label className={styles.label}>\n//         <span className={styles.text}>Name</span>\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Your name\"\n//           aria-label=\"Input for your name\"\n//           className={styles.input}\n//           value={name}\n//           onChange={hanldeChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//       </label>\n\n//       <label className={styles.label}>\n//         <span className={styles.text}>Email</span>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={email}\n//           onChange={hanldeChange}\n//           className={styles.input}\n//           placeholder=\"Your e-mail\"\n//           aria-label=\"Input for your Email\"\n//           required\n//         />\n//       </label>\n\n//       <label className={styles.label}>\n//         <span className={styles.text}>Password</span>\n//         <input\n//           type=\"password\"\n//           name=\"password\"\n//           value={password}\n//           onChange={hanldeChange}\n//           className={styles.input}\n//           placeholder=\"Should be at least 7 characters\"\n//           aria-label=\"Input for your password\"\n//           required\n//         />\n//       </label>\n\n//       <div className={styles.container}>\n//         <button type=\"submit\" className={styles.button}>\n//           Create account\n//         </button>\n//       </div>\n//     </form>\n//   );\n// };\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n\nexport default RegisterForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterPage_container__l-2BF\",\"title\":\"RegisterPage_title__Yjy6g\"};","import { useDispatch } from 'react-redux';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { signup } from '../../redux/users/users-operations';\nimport style from './RegisterPage.module.css'\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const handleSignup = data => dispatch(signup(data));\n\n  return (\n    <div className={style.container}>\n      <h2 className={style.title}>Create your account please</h2>\n      <RegisterForm onSubmit={handleSignup} />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__urlvE\"};","import style from './Button.module.css';\n\nconst Button = ({ children, type='submit' }) => {\n  return <button type={type} className={style.button}>{children}</button>;\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TextField_wrapper__OQN5w\",\"field\":\"TextField_field__f880x\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport style from './TextField.module.css';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={style.wrapper}>\n      <label htmlFor={id}>\n        {label}</label>\n           <input \n        className={style.field}\n        id={id}\n        onChange={handleChange}\n        {...props}\n        type=\"text\"\n      /> \n    </div>\n  );\n};\n\nexport default TextField;\n","import { useState, useCallback } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["name","type","required","label","placeholder","email","password","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","style","TextField","value","fields","Button","dispatch","useDispatch","data","signup","children","props","id","useMemo","nanoid","htmlFor","onChange","useState","setState","useCallback","target","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}