{"version":3,"file":"static/js/871.b7badd74.chunk.js","mappings":"0OAiBA,EAjBe,CACbA,MAAO,CACLC,KAAM,QACNC,KAAM,QACNC,UAAU,EACVC,MAAO,QACPC,YAAa,cAEfC,SAAU,CACRL,KAAM,WACNC,KAAM,WACNC,UAAU,EACVC,MAAO,WACPC,YAAa,kBCRjB,EALqB,CACnBL,MAAO,GACPM,SAAU,I,UCDZ,GAAiB,E,SCyBjB,EAnBkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAA8CC,EAAAA,EAAAA,GAAQ,CACpDC,aAAAA,EACAF,SAAAA,IAFMG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,aAIrBZ,EAAoBU,EAApBV,MAAOM,EAAaI,EAAbJ,SACf,OACE,kBAAMO,UAAWC,EAAAA,KAAYP,SAAUK,EAAvC,WACO,SAACG,EAAA,GAAD,QAAWC,MAAOhB,EAAOW,aAAcA,GAAkBM,EAAAA,SAC9D,SAACF,EAAA,GAAD,QACEC,MAAOV,EACPK,aAAcA,GACVM,EAAAA,YAEN,SAACC,EAAA,EAAD,sBAGL,ECRD,EAZkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iBAAKP,UAAU,YAAf,WACE,eAAIA,UAAU,aAAd,wBACA,SAAC,EAAD,CAAWN,SALK,SAAAc,GAAI,OAAIF,GAASG,EAAAA,EAAAA,IAAMD,GAAnB,MAQzB,C,uDCbD,MAAyB,uB,SCKzB,EAJe,SAAC,GAAiC,IAA/BE,EAA8B,EAA9BA,SAA8B,IAApBtB,KAAAA,OAAoB,MAAf,SAAe,EAC9C,OAAO,mBAAQA,KAAMA,EAAMY,UAAWC,EAA/B,SAA8CS,GACtD,C,mGCHD,EAA0B,2BAA1B,EAA6D,yB,oCCmB7D,EAhBkB,SAAC,GAAuC,IAArCnB,EAAoC,EAApCA,MAAOO,EAA6B,EAA7BA,aAAiBa,GAAY,YACjDC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACnC,OACE,iBAAKd,UAAWC,EAAhB,WACE,kBAAOc,QAASH,EAAhB,SAAqBrB,KACrB,kCACES,UAAWC,EACXW,GAAIA,EACJI,SAAUlB,GACNa,GAJN,IAKEvB,KAAK,YAIZ,C,mECMD,IAtBgB,SAAC,GAAgC,IAA9BQ,EAA6B,EAA7BA,aAAcF,EAAe,EAAfA,SAC/B,GAA0BuB,EAAAA,EAAAA,WAAS,UAAKrB,IAAxC,eAAOC,EAAP,KAAcqB,EAAd,KAEMpB,GAAeqB,EAAAA,EAAAA,cACnB,YAAiB,IAAdC,EAAa,EAAbA,OACO/B,EAAgB+B,EAAhB/B,KAAMc,EAAUiB,EAAVjB,MACde,GAAS,SAAAG,GACP,OAAO,kBAAKA,GAAZ,cAAwBhC,EAAOc,GAChC,GACF,GACD,CAACe,IASH,MAAO,CAAErB,MAAAA,EAAOqB,SAAAA,EAAUpB,aAAAA,EAAcC,aANnB,SAAAuB,GACnBA,EAAEC,iBACF7B,GAAS,UAAKG,IACdqB,GAAS,UAAKtB,GACf,EAGF,C,wDCrBM,IAkBIkB,EAAS,eAACU,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAChB,EAAIiB,GAWvD,OAREjB,IAFFiB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/LoginForm/fields.js","components/LoginForm/initialState.js","components/LoginForm/LoginForm.module.css","components/LoginForm/LoginForm.jsx","pages/LoginPages/LoginPages.jsx","webpack://react-homework-template/./src/shared/components/Button/Button.module.css?4d6c","shared/components/Button/Button.jsx","webpack://react-homework-template/./src/shared/components/TextField/TextField.module.css?2d5d","shared/components/TextField/TextField.jsx","shared/hook/useForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'Email',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'Password',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","const initialState = {\n  email: '',\n  password: '',\n};\n\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {};","import TextField from 'shared/components/TextField/TextField';\nimport useForm from 'shared/hook/useForm';\nimport fields from './fields';\nimport initialState from './initialState';\nimport Button from 'shared/components/Button/Button';\nimport style from './LoginForm.module.css';\n\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n  return (\n    <form className={style.form} onSubmit={handleSubmit}>\n           <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Login</Button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import { useDispatch } from 'react-redux';\nimport { login } from '../../redux/users/users-operations';\nimport LoginForm from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const handleLogin = data => dispatch(login(data));\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"page-title\">LoginPage</h2>\n      <LoginForm onSubmit={handleLogin} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__urlvE\"};","import style from './Button.module.css';\n\nconst Button = ({ children, type='submit' }) => {\n  return <button type={type} className={style.button}>{children}</button>;\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TextField_wrapper__OQN5w\",\"field\":\"TextField_field__f880x\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport style from './TextField.module.css';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={style.wrapper}>\n      <label htmlFor={id}>{label}</label>\n      <input\n        className={style.field}\n        id={id}\n        onChange={handleChange}\n        {...props}\n        type=\"text\"\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n","import { useState, useCallback } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["email","type","name","required","label","placeholder","password","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","style","TextField","value","fields","Button","dispatch","useDispatch","data","login","children","props","id","useMemo","nanoid","htmlFor","onChange","useState","setState","useCallback","target","prevState","e","preventDefault","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}