{"version":3,"file":"static/js/217.f2821507.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/AddForm/AddForm.module.css?c4c6","components/AddForm/AddForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactPage/ContactPage.module.css?b217","pages/ContactPage/ContactPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerInput\":\"AddForm_containerInput__upGJ6\",\"formInput\":\"AddForm_formInput__3G1hB\",\"buttonForm\":\"AddForm_buttonForm__5FZ1w\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport style from './AddForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(state => state.contacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContacts = {\n      id: nanoid(),\n      name: name,\n      number: phone,\n    };\n\n    if (\n      contacts?.some(\n        contact =>\n          contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      return toast.info(`${name} is already in contacts`);\n    }\n    dispatch(addContact(newContacts));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={style.containerInput}>\n        <label htmlFor={nameId} className={style.formLabel}>\n          <span className={style.text}>Name</span>\n          <input\n            className={style.formInput}\n            value={name}\n            id={nameId}\n            type=\"text\"\n            onChange={handleChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={numberId} className={style.formLabel}>\n          <span className={style.text}> Number</span>\n          <input\n            className={style.formInput}\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={phone}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <button type=\"submit\" className={style.buttonForm}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// ContactForm.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n//   isLoading: PropTypes.bool.isRequired,\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"listUsers\":\"ContactList_listUsers__OytT4\",\"wrapper\":\"ContactList_wrapper__VP-XU\",\"buttonDelete\":\"ContactList_buttonDelete__3LEoC\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport style from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contactList = useSelector(state => state.contacts.contacts);\n  const contactFilter = useSelector(state => state.filter);\n  const normalizedFilterContacts = contactList?.filter(contact => {\n    return contact.name.toLowerCase().includes(contactFilter);\n  });\n\n  return (\n    <ol className={style.listUsers}>\n      {normalizedFilterContacts?.map(contact => (\n        <li key={contact.id} className={style.itemUser}>\n          <div className={style.wrapper}>\n            <p className={style.itemText}>{contact.name}:</p>\n            <p className={style.itemText}> {contact.number}</p>\n          </div>\n          <button\n            className={style.buttonDelete}\n            onClick={id => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ol>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filter.slice';\nimport { nanoid } from 'nanoid';\nimport style from './Filter.module.css';\n\nexport default function Filter() {\n  const filterQuery = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  return (\n    <label className={style.filterInput} htmlFor={filterId}>\n      Find contacts by name\n      <input className={style.filterInput}\n        name=\"filter\"\n        id={filterId}\n        type=\"text\"\n        value={filterQuery}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      />\n    </label>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactPage_container__p8wM4\",\"titleBook\":\"ContactPage_titleBook__kNRND\",\"titleContacts\":\"ContactPage_titleContacts__Udlnb\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport ContactForm from 'components/AddForm/AddForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport style from './ContactPage.module.css';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n  const addedContacts = useSelector(state => state.contacts.contacts);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div className={style.container}>\n      <h1 className={style.titleBook}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={style.titleContacts}>Contacts</h2>\n      {error && toast.error('Oops! Error')}\n      {isLoading && (      \n          <Loader />\n      )}\n      {addedContacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <h2>You have not added contacts yet</h2>\n      )}\n    </div>\n  );\n};\n\nexport default ContactPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","phone","setPhone","nameId","nanoid","numberId","dispatch","useDispatch","contacts","useSelector","state","resetForm","handleChange","event","target","value","onSubmit","preventDefault","newContacts","id","number","some","contact","toLowerCase","trim","toast","addContact","className","style","htmlFor","type","onChange","pattern","title","required","ContactList","contactList","contactFilter","filter","normalizedFilterContacts","includes","map","onClick","deleteContact","Filter","filterQuery","filterId","e","setFilter","currentTarget","addedContacts","isLoading","error","useEffect","fetchContacts","Loader","length","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}